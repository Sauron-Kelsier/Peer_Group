 /*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package myServer;

import com.mysql.jdbc.Connection;
import com.mysql.jdbc.ResultSet;
import com.mysql.jdbc.Statement;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JColorChooser;
import javax.swing.JComboBox;
import com.mysql.jdbc.Connection;
import javax.swing.JOptionPane;



/**
 *
 * @author sukalyan14
 */
public class ViewOnePerformance extends javax.swing.JFrame {
    
    Connection databaseConnection;
   

    /**
     * Creates new form ViewOnePerformance
     */
    public ViewOnePerformance() {
        initComponents();
    }
    
    public ViewOnePerformance(Connection db)
    {
        initComponents();
        databaseConnection=db;
        String[] subject={"","English","Maths","Science","Hindi","Computer","GK"};
        String[] standard={"","6","7","8","9","10","11","12"};
        subjectField.setModel(new javax.swing.DefaultComboBoxModel(subject));
        standardField.setModel(new javax.swing.DefaultComboBoxModel(standard));
    }
    
    
    // to extract the roll number from the name
    public String getRollQuery(String name) throws SQLException
    {
        Statement start=(Statement)databaseConnection.createStatement();
	String query=new String("SELECT roll_number FROM student_info WHERE name LIKE '"+name+"'");
	
        System.out.println("In the method");
	ResultSet res=(ResultSet)start.executeQuery(query);
	res.next();
	
	return res.getString("roll_number");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        heading = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        findButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        name = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        rollNumberField = new javax.swing.JTextField();
        rollNumber = new javax.swing.JLabel();
        subject = new javax.swing.JLabel();
        standard = new javax.swing.JLabel();
        fromDate = new javax.swing.JLabel();
        toDate = new javax.swing.JLabel();
        fromDateField = new javax.swing.JTextField();
        toDateField = new javax.swing.JTextField();
        subjectField = new javax.swing.JComboBox();
        standardField = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        heading.setFont(new java.awt.Font("Verdana", 1, 24)); // NOI18N
        heading.setText("View Performance");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(149, 149, 149)
                .addComponent(heading)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(heading)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        findButton.setText("Find");
        findButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findButtonActionPerformed(evt);
            }
        });

        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(findButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(clearButton)
                .addGap(31, 31, 31)
                .addComponent(backButton)
                .addGap(81, 81, 81))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {backButton, clearButton, findButton});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(findButton)
                    .addComponent(clearButton)
                    .addComponent(backButton))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        name.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        name.setText("Name:");

        nameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameFieldActionPerformed(evt);
            }
        });

        rollNumberField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rollNumberFieldActionPerformed(evt);
            }
        });

        rollNumber.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        rollNumber.setText("Roll Number:");

        subject.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        subject.setText("Subject:");

        standard.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        standard.setText("Standard:");

        fromDate.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        fromDate.setText("From Date:");

        toDate.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        toDate.setText("To Date:");

        toDateField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toDateFieldActionPerformed(evt);
            }
        });

        subjectField.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---none---", "English", "Maths", "Science", "Hindi", "Computer", "GK" }));
        subjectField.setToolTipText("");

        standardField.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---none---", "6", "7", "8", "9", "10", "11", "12" }));
        standardField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                standardFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(subject, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(name, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(rollNumber, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fromDate, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(standard, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(toDate, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(rollNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(70, 70, 70))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fromDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(toDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(subjectField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(standardField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {fromDateField, nameField, rollNumberField, toDateField});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rollNumber)
                    .addComponent(rollNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(name)
                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(subject)
                    .addComponent(subjectField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(standard, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(standardField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fromDate)
                    .addComponent(fromDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(toDate)
                    .addComponent(toDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        // TODO add your handling code here:
        
        rollNumberField.setText("");
        nameField.setText("");
        subjectField.setSelectedIndex(0);
        standardField.setSelectedIndex(0);
        fromDateField.setText("");
        toDateField.setText("");
        
    }//GEN-LAST:event_clearButtonActionPerformed

    private void rollNumberFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rollNumberFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rollNumberFieldActionPerformed

    private void findButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findButtonActionPerformed
        
                                                   
            // TODO add your handling code here:
            
            
            // fetching the value of the selected item. Returned in the form of an object
            // So, converted into string in order to store in a variable
            int flag=0,signal=0;
            
            String rollNumber=new String(rollNumberField.getText());
            String name=new String(nameField.getText());
            String subject=new String(subjectField.getSelectedItem().toString());
            String standard=new String(standardField.getSelectedItem().toString());
            String fromDate=new String(fromDateField.getText());
            String toDate=new String(toDateField.getText());
            
            
            // the parent query
            // further parts of the query and concatenated later
            String query=new String("SELECT * FROM student_performance WHERE");
            
            
            // checking whether the roll number field is filled by the user
            if(!rollNumber.equals(""))
            {
                query=query.concat(" roll_number LIKE '"+rollNumber+"'");
                flag=1;
                signal=1;
            }
            
            // Checking if 'name' field is filled by the user
            if(!name.equals(""))
            {
                if(flag==1)
                {
                    query=query.concat(" AND");
                    signal=0;
                    
                }
                query=query.concat(" NAME LIKE '"+name+"'");
                flag=1;
                signal=1;

            }
            
            
            // checking if the 'subject' has been chosen by the user
            if(!subject.equals(""))
            {
                if(flag==1)
                {
                    query=query.concat(" AND");
                }
                query=query.concat(" subject LIKE '"+subject+"'");
                flag=1;
                
            }
            
            
            
            // checking if the standard option has been selected by the user
            if(!standard.equals(""))
            {
                if(flag==1)
                {
                     query=query.concat(" AND");
                }
                query=query.concat(" standard LIKE '"+standard+"'");
                flag=1;
                signal++;
            }
            
            
            // if both dates are given then the query has to be done for a range
            if(!fromDate.equals("") && !toDate.equals(""))
            {
                    if(flag==1)
                    {
                            query=query.concat(" AND");
                    }
                    query=query.concat(" date between '"+fromDate+"' AND '"+toDate+"'");
            }
            
            // if From Date is given then the parameter is the lower value 
            else if(!fromDate.equals(""))
            {
                    if(flag==1)
                    {
                            query=query.concat(" AND");
                    }
                    query=query.concat(" date > '"+fromDate+"'");
            }
            
            // if To Date is given then the parameter is the higher value
            else if(!toDate.equals(""))
            {
                    if(flag==1)
                    {
                            query=query.concat(" AND");
                    }
                    query=query.concat(" date < '"+toDate+"'");
                    
            }
            
            System.out.println(query);   
            
            // if no field has been entered by the teacher

            
            // if signal=1, then only the roll number or the name or both have been inserted by the teacher for viewing the performace
            // if signal=2, then both standard and the above condition is satisfied and the method for drawing the bar graph will be called
            
            
            if(signal==2)
            {
                try 
                {
                    // calling the method for drawing, saving and finally displaying the bar graph
                    JavaChartDemo obj=new JavaChartDemo();
                    obj.draw(rollNumber,standard,subject,databaseConnection);
                }
                catch (SQLException ex) 
                {
                    JOptionPane.showMessageDialog(this,"Please try again!!");
                }

            }
            else
            {
                ResultSet res;
                try 
                {
                    Statement start=(Statement) databaseConnection.createStatement();
                    res = (ResultSet)start.executeQuery(query);
                    viewPerformanceActual obj=new viewPerformanceActual();
                    obj.displayRecord(null, res);
                    if(res.next())
                    {
                        System.out.println("Yes!!");                
                    }
                    else
                    {
                        System.out.println("No!!");
                    }
                }
                catch (SQLException ex) 
                {
                    JOptionPane.showMessageDialog(this,"Please enter atleast 2 field");
                }
            }
        
    }//GEN-LAST:event_findButtonActionPerformed

    private void nameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameFieldActionPerformed

    private void toDateFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toDateFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_toDateFieldActionPerformed

    private void standardFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_standardFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_standardFieldActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        
        TeacherOption obj=new TeacherOption(databaseConnection);
        this.setVisible(false);
        obj.setVisible(true);
    }//GEN-LAST:event_backButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewOnePerformance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewOnePerformance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewOnePerformance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewOnePerformance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ViewOnePerformance().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton findButton;
    private javax.swing.JLabel fromDate;
    private javax.swing.JTextField fromDateField;
    private javax.swing.JLabel heading;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel name;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel rollNumber;
    private javax.swing.JTextField rollNumberField;
    private javax.swing.JLabel standard;
    private javax.swing.JComboBox standardField;
    private javax.swing.JLabel subject;
    private javax.swing.JComboBox subjectField;
    private javax.swing.JLabel toDate;
    private javax.swing.JTextField toDateField;
    // End of variables declaration//GEN-END:variables
}
